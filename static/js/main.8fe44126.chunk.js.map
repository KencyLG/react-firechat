{"version":3,"sources":["components/Button.js","config/firebase.js","login/signInWithGoogle.js","login/signOut.js","hooks/useAuthState.js","components/Message.js","components/Channel.js","App.js","reportWebVitals.js","index.js"],"names":["Button","onClick","children","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","db","firestore","googleAuthProvider","auth","GoogleAuthProvider","signInWithGoogle","a","useDeviceLanguage","signInWithPopup","console","error","message","signOut","useAuthState","useState","initializing","setInitializing","currentUser","user","setUser","useEffect","onAuthStateChanged","formatDate","date","formattedDate","formatRelative","Date","charAt","toUpperCase","slice","Message","createdAt","text","displayName","photoURL","class","src","alt","className","width","height","seconds","Channel","messages","setMessages","collection","orderBy","limit","onSnapshot","querySnapshot","data","docs","map","doc","id","uid","newMessage","setNewMessage","messagesRef","inputRef","useRef","current","focus","onSubmit","e","preventDefault","trimmedMessage","trim","add","FieldValue","serverTimestamp","ref","type","value","onChange","target","placeholder","disabled","App","renderLoading","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8fe44126.chunk.js","sourcesContent":["const Button = ({\r\n    onClick = null,\r\n    children = null\r\n}) =>\r\n(\r\n    <button onClick={onClick} >{children} </button>\r\n);\r\n\r\nexport default Button;","import firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport 'firebase/firestore';\r\n\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyDY5A5yj3m7yOhaqdijiUZ0RcnQ0uJ_Jog\",\r\n    authDomain: \"fire-chat-7c661.firebaseapp.com\",\r\n    projectId: \"fire-chat-7c661\",\r\n    storageBucket: \"fire-chat-7c661.appspot.com\",\r\n    messagingSenderId: \"76837266147\",\r\n    appId: \"1:76837266147:web:26fe146590cc1bd4239bd6\",\r\n    measurementId: \"G-B6E147ZY3Z\"\r\n  };\r\n\r\n\r\n\r\n  firebase.initializeApp(firebaseConfig);\r\n\r\n\r\nconst db = firebase.firestore();\r\nconst googleAuthProvider= new firebase.auth.GoogleAuthProvider();\r\n\r\nexport {\r\n    db,\r\n    googleAuthProvider,\r\n    firebase\r\n}\r\n\r\n","import{\r\n    googleAuthProvider,\r\n    firebase\r\n  }from '../config/firebase';\r\n  \r\n  const signInWithGoogle = async ()=>{\r\n      firebase.auth().useDeviceLanguage();\r\n      try {\r\n        await firebase.auth().signInWithPopup(googleAuthProvider);\r\n      }catch (e){\r\n        console.error(e.message);\r\n      }\r\n    }\r\n  export default signInWithGoogle;","import {\r\n    firebase\r\n} from '../config/firebase';\r\n\r\nconst signOut = async () => {\r\n    try {\r\n        await firebase.auth().signOut();\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n}\r\nexport default signOut;","import { useEffect, useState } from \"react\";\r\n\r\nfunction useAuthState(auth){\r\n    const[initializing, setInitializing]= useState(true);\r\n    const[user, setUser] = useState(()=> auth.currentUser);\r\n\r\n    useEffect(() =>{\r\n        const unsubscribe = auth.onAuthStateChanged(user =>{\r\n            if (user) {\r\n                setUser(user);\r\n            } else {\r\n                setUser(false);\r\n            }\r\n            if (initializing){\r\n                setInitializing(false);\r\n            }\r\n        });\r\n\r\n        //Cleanup subscription\r\n        return unsubscribe;\r\n    },[auth, initializing]);\r\n  \r\n    return { user, initializing};\r\n}\r\n\r\nexport default useAuthState","import { formatRelative } from 'date-fns';\r\n\r\n\r\nconst formatDate = date => {\r\n    let formattedDate = '';\r\n    if (date) {\r\n        // Convert the date in words relative to the current date\r\n        formattedDate = formatRelative(date, new Date());\r\n        // Uppercase the first letter\r\n        formattedDate =\r\n            formattedDate.charAt(0).toUpperCase() + formattedDate.slice(1);\r\n    }\r\n    return formattedDate;\r\n};\r\n\r\n\r\n// Message.js\r\nconst Message = ({\r\n    createdAt = null,\r\n    text = '',\r\n    displayName = '',\r\n    photoURL = '',\r\n}) => {\r\n    if (!text) return null;\r\n\r\n    \r\n    return (// devuelve los mensajes con el nombre de del usuario y imagen del perfil.\r\n        <div class=\"todo\">\r\n            <button class=\"f\">...</button>\r\n            {photoURL ? (// imagen del perfil\r\n                <img\r\n                    src={photoURL}\r\n                    alt=\"Avatar\"\r\n                    className=\"rounded-full mr-4\"\r\n                    width={45}\r\n                    height={45}\r\n                />\r\n            ) : null}\r\n           \r\n            {displayName ? <p >{displayName}</p> : null}\r\n            {createdAt?.seconds ? (\r\n                <span>{formatDate(new Date(createdAt.seconds * 1000))}</span>\r\n            ) : null}\r\n            <div class=\"text\"><p class=\"hola\">{text}</p></div>\r\n        </div>\r\n        \r\n    );;\r\n};\r\n\r\n\r\nexport default Message;","import { useEffect, useState, useRef } from 'react';\r\nimport { db, firebase } from '../config/firebase';\r\nimport Message from './Message';\r\nimport '../style/style.css';\r\n\r\n\r\nconst Channel = ({ user = null }) => {\r\n    const [messages, setMessages] = useState([]);\r\n\r\n    //Necesito cargar los mensajes desde la BD.\r\n    useEffect(() => {\r\n        /* \r\n            Crear el query de los mensajes.\r\n            Cargar 100 mensajes ordenados por fecha.\r\n        */\r\n        const query = db.collection('messages')\r\n            .orderBy('createdAt')\r\n            .limit(100);\r\n\r\n        const unsubscribe = query.onSnapshot(querySnapshot => {\r\n            //Obtiene todos los mensajes desde la bd con su ID.\r\n            const data = querySnapshot.docs.map(doc => ({\r\n                ...doc.data(),\r\n                id: doc.id,\r\n            }));\r\n            // Actualizo los mensjaes obtenidos desde la bd. \r\n            setMessages(data);\r\n\r\n        });\r\n        //CleanUp\r\n        return unsubscribe;\r\n\r\n    }, [])\r\n\r\n\r\n    //Codigo para agregar nuevos mensajes\r\n    const { uid, displayName, photoURL } = user;\r\n    const [newMessage, setNewMessage] = useState('');\r\n\r\n    const handleMessageOnChange = (e) => {\r\n        e.preventDefault();\r\n        setNewMessage(e.target.value);\r\n    }\r\n\r\n\r\n    const messagesRef = db.collection('messages');\r\n\r\n\r\n    const handleOnSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        const trimmedMessage = newMessage.trim();\r\n        if (trimmedMessage) {\r\n            // Add new message in Firestore\r\n            messagesRef.add({\r\n                text: trimmedMessage,\r\n                createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n                uid,\r\n                displayName,\r\n                photoURL,\r\n            });\r\n            // Clear input field\r\n            setNewMessage('');\r\n        }\r\n    };\r\n\r\n    const inputRef = useRef();\r\n    useEffect(() => {\r\n        if (inputRef.current) {\r\n            inputRef.current.focus();\r\n        }\r\n    }, [inputRef]);\r\n\r\n\r\n    return (\r\n        <>\r\n            <ul>\r\n                {messages.map(message => (\r\n                    <li key={message.id}>\r\n                        <Message {...message} />\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n\r\n            <form \r\n                onSubmit={handleOnSubmit}>\r\n                <input\r\n                    ref={inputRef}\r\n                    type=\"text\"\r\n                    value={newMessage}\r\n                    onChange={handleMessageOnChange}\r\n                    placeholder=\"Escribe tu mensaje aqui...\"\r\n                />\r\n\r\n                <button\r\n                    class=\" enviar\"\r\n                    type=\"submit\"\r\n                    disabled={!newMessage}\r\n                >\r\n                    Enviar\r\n        </button>\r\n            </form>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Channel;","\r\nimport Button from './components/Button';\r\nimport {signInWithGoogle, signOut} from './login';\r\nimport {useAuthState} from './hooks'\r\nimport { firebase } from './config/firebase';\r\n  import Channel from './components/Channel';\r\n\r\n  function App(){\r\n    const {user, initializing} = useAuthState(firebase.auth());\r\n  \r\n    const renderLoading = ()=> {\r\n      if (initializing){\r\n        return <div>\r\n          <h1>Loading ...</h1>\r\n        </div>\r\n      }\r\n    }\r\n    return(\r\n      <div>\r\n        {renderLoading()}\r\n        {\r\n          user ? (\r\n            \r\n            <>\r\n            \r\n            <center>\r\n            \r\n            <header><h4>Firechat-MaximeGroup</h4><Button onClick={signOut}> Logout Google</Button></header>\r\n            <br></br><br></br><br></br>\r\n            <div class=\"contenedor\">\r\n            <br></br><br></br><br></br>\r\n            \r\n            <h4 class=\"ben\">Bienvenidos al Chat!</h4>\r\n            <Channel user={user}/>\r\n            <hr></hr>\r\n\r\n            <br></br><br></br><br></br>\r\n            </div>\r\n            </center>\r\n            <br></br>\r\n            \r\n            </>\r\n            \r\n            ):<Button onClick={signInWithGoogle} > Sign in with Google</Button>\r\n            \r\n          }\r\n          <br></br>\r\n      </div>\r\n    );\r\n  }\r\n  export default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}